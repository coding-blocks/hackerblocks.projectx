{"version":3,"sources":["runtime.js","frame-bundle.js"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","(function () {\n\t'use strict';\n\n\tfunction unwrapExports (x) {\n\t\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n\t}\n\n\tfunction createCommonjsModule(fn, module) {\n\t\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n\t}\n\n\tvar lib = createCommonjsModule(function (module, exports) {\n\n\t  Object.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t  });\n\t  exports.default = exports.ERR_IFRAME_ALREADY_ATTACHED_TO_DOM = exports.ERR_NOT_IN_IFRAME = exports.ERR_CONNECTION_TIMEOUT = exports.ERR_CONNECTION_DESTROYED = void 0;\n\t  var HANDSHAKE = 'handshake';\n\t  var HANDSHAKE_REPLY = 'handshake-reply';\n\t  var CALL = 'call';\n\t  var REPLY = 'reply';\n\t  var FULFILLED = 'fulfilled';\n\t  var REJECTED = 'rejected';\n\t  var MESSAGE = 'message';\n\t  var DATA_CLONE_ERROR = 'DataCloneError';\n\t  var ERR_CONNECTION_DESTROYED = 'ConnectionDestroyed';\n\t  exports.ERR_CONNECTION_DESTROYED = ERR_CONNECTION_DESTROYED;\n\t  var ERR_CONNECTION_TIMEOUT = 'ConnectionTimeout';\n\t  exports.ERR_CONNECTION_TIMEOUT = ERR_CONNECTION_TIMEOUT;\n\t  var ERR_NOT_IN_IFRAME = 'NotInIframe';\n\t  exports.ERR_NOT_IN_IFRAME = ERR_NOT_IN_IFRAME;\n\t  var ERR_IFRAME_ALREADY_ATTACHED_TO_DOM = 'IframeAlreadyAttachedToDom';\n\t  exports.ERR_IFRAME_ALREADY_ATTACHED_TO_DOM = ERR_IFRAME_ALREADY_ATTACHED_TO_DOM;\n\t  var CHECK_IFRAME_IN_DOC_INTERVAL = 60000;\n\t  var DEFAULT_PORTS = {\n\t    'http:': '80',\n\t    'https:': '443'\n\t  };\n\t  var URL_REGEX = /^(https?:|file:)?\\/\\/([^/:]+)?(:(\\d+))?/;\n\t  var Penpal = {\n\t    ERR_CONNECTION_DESTROYED: ERR_CONNECTION_DESTROYED,\n\t    ERR_CONNECTION_TIMEOUT: ERR_CONNECTION_TIMEOUT,\n\t    ERR_NOT_IN_IFRAME: ERR_NOT_IN_IFRAME,\n\t    ERR_IFRAME_ALREADY_ATTACHED_TO_DOM: ERR_IFRAME_ALREADY_ATTACHED_TO_DOM,\n\n\t    /**\n\t     * Promise implementation.\n\t     * @type {Constructor}\n\t     */\n\t    Promise: function () {\n\t      try {\n\t        return window ? window.Promise : null;\n\t      } catch (e) {\n\t        return null;\n\t      }\n\t    }(),\n\n\t    /**\n\t     * Whether debug messages should be logged.\n\t     * @type {boolean}\n\t     */\n\t    debug: false\n\t  };\n\t  /**\n\t   * @return {number} A unique ID (not universally unique)\n\t   */\n\n\t  var generateId = function () {\n\t    var id = 0;\n\t    return function () {\n\t      return ++id;\n\t    };\n\t  }();\n\t  /**\n\t   * Logs a message.\n\t   * @param {...*} args One or more items to log\n\t   */\n\n\n\t  var log = function log() {\n\t    if (Penpal.debug) {\n\t      var _console;\n\n\t      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n\t        args[_key] = arguments[_key];\n\t      }\n\n\t      (_console = console).log.apply(_console, ['[Penpal]'].concat(args)); // eslint-disable-line no-console\n\n\t    }\n\t  };\n\t  /**\n\t   * Converts a URL into an origin.\n\t   * @param {string} url\n\t   * @return {string} The URL's origin\n\t   */\n\n\n\t  var getOriginFromUrl = function getOriginFromUrl(url) {\n\t    var location = document.location;\n\t    var regexResult = URL_REGEX.exec(url);\n\t    var protocol;\n\t    var hostname;\n\t    var port;\n\n\t    if (regexResult) {\n\t      // It's an absolute URL. Use the parsed info.\n\t      // regexResult[1] will be undefined if the URL starts with //\n\t      protocol = regexResult[1] ? regexResult[1] : location.protocol;\n\t      hostname = regexResult[2];\n\t      port = regexResult[4];\n\t    } else {\n\t      // It's a relative path. Use the current location's info.\n\t      protocol = location.protocol;\n\t      hostname = location.hostname;\n\t      port = location.port;\n\t    } // If the protocol is file, the origin is \"null\"\n\t    // The origin of a document with file protocol is an opaque origin\n\t    // and its serialization \"null\" [1]\n\t    // [1] https://html.spec.whatwg.org/multipage/origin.html#origin\n\n\n\t    if (protocol === \"file:\") {\n\t      return \"null\";\n\t    } // If the port is the default for the protocol, we don't want to add it to the origin string\n\t    // or it won't match the message's event.origin.\n\n\n\t    var portSuffix = port && port !== DEFAULT_PORTS[protocol] ? \":\".concat(port) : '';\n\t    return \"\".concat(protocol, \"//\").concat(hostname).concat(portSuffix);\n\t  };\n\t  /**\n\t   * A simplified promise class only used internally for when destroy() is called. This is\n\t   * used to destroy connections synchronously while promises typically resolve asynchronously.\n\t   *\n\t   * @param {Function} executor\n\t   * @returns {Object}\n\t   * @constructor\n\t   */\n\n\n\t  var DestructionPromise = function DestructionPromise(executor) {\n\t    var handlers = [];\n\t    executor(function () {\n\t      handlers.forEach(function (handler) {\n\t        handler();\n\t      });\n\t    });\n\t    return {\n\t      then: function then(handler) {\n\t        handlers.push(handler);\n\t      }\n\t    };\n\t  };\n\t  /**\n\t   * Converts an error object into a plain object.\n\t   * @param {Error} Error object.\n\t   * @returns {Object}\n\t   */\n\n\n\t  var serializeError = function serializeError(_ref) {\n\t    var name = _ref.name,\n\t        message = _ref.message,\n\t        stack = _ref.stack;\n\t    return {\n\t      name: name,\n\t      message: message,\n\t      stack: stack\n\t    };\n\t  };\n\t  /**\n\t   * Converts a plain object into an error object.\n\t   * @param {Object} Object with error properties.\n\t   * @returns {Error}\n\t   */\n\n\n\t  var deserializeError = function deserializeError(obj) {\n\t    var deserializedError = new Error();\n\t    Object.keys(obj).forEach(function (key) {\n\t      return deserializedError[key] = obj[key];\n\t    });\n\t    return deserializedError;\n\t  };\n\t  /**\n\t   * Augments an object with methods that match those defined by the remote. When these methods are\n\t   * called, a \"call\" message will be sent to the remote, the remote's corresponding method will be\n\t   * executed, and the method's return value will be returned via a message.\n\t   * @param {Object} callSender Sender object that should be augmented with methods.\n\t   * @param {Object} info Information about the local and remote windows.\n\t   * @param {Array} methodNames Names of methods available to be called on the remote.\n\t   * @param {Promise} destructionPromise A promise resolved when destroy() is called on the penpal\n\t   * connection.\n\t   * @returns {Object} The call sender object with methods that may be called.\n\t   */\n\n\n\t  var connectCallSender = function connectCallSender(callSender, info, methodNames, destroy, destructionPromise) {\n\t    var localName = info.localName,\n\t        local = info.local,\n\t        remote = info.remote,\n\t        remoteOrigin = info.remoteOrigin;\n\t    var destroyed = false;\n\t    log(\"\".concat(localName, \": Connecting call sender\"));\n\n\t    var createMethodProxy = function createMethodProxy(methodName) {\n\t      return function () {\n\t        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n\t          args[_key2] = arguments[_key2];\n\t        }\n\n\t        log(\"\".concat(localName, \": Sending \").concat(methodName, \"() call\")); // This handles the case where the iframe has been removed from the DOM\n\t        // (and therefore its window closed), the consumer has not yet\n\t        // called destroy(), and the user calls a method exposed by\n\t        // the remote. We detect the iframe has been removed and force\n\t        // a destroy() immediately so that the consumer sees the error saying\n\t        // the connection has been destroyed.\n\n\t        if (remote.closed) {\n\t          destroy();\n\t        }\n\n\t        if (destroyed) {\n\t          var error = new Error(\"Unable to send \".concat(methodName, \"() call due \") + \"to destroyed connection\");\n\t          error.code = ERR_CONNECTION_DESTROYED;\n\t          throw error;\n\t        }\n\n\t        return new Penpal.Promise(function (resolve, reject) {\n\t          var id = generateId();\n\n\t          var handleMessageEvent = function handleMessageEvent(event) {\n\t            if (event.source === remote && event.origin === remoteOrigin && event.data.penpal === REPLY && event.data.id === id) {\n\t              log(\"\".concat(localName, \": Received \").concat(methodName, \"() reply\"));\n\t              local.removeEventListener(MESSAGE, handleMessageEvent);\n\t              var returnValue = event.data.returnValue;\n\n\t              if (event.data.returnValueIsError) {\n\t                returnValue = deserializeError(returnValue);\n\t              }\n\n\t              (event.data.resolution === FULFILLED ? resolve : reject)(returnValue);\n\t            }\n\t          };\n\n\t          local.addEventListener(MESSAGE, handleMessageEvent);\n\t          remote.postMessage({\n\t            penpal: CALL,\n\t            id: id,\n\t            methodName: methodName,\n\t            args: args\n\t          }, remoteOrigin);\n\t        });\n\t      };\n\t    };\n\n\t    destructionPromise.then(function () {\n\t      destroyed = true;\n\t    });\n\t    methodNames.reduce(function (api, methodName) {\n\t      api[methodName] = createMethodProxy(methodName);\n\t      return api;\n\t    }, callSender);\n\t  };\n\t  /**\n\t   * Listens for \"call\" messages coming from the remote, executes the corresponding method, and\n\t   * responds with the return value.\n\t   * @param {Object} info Information about the local and remote windows.\n\t   * @param {Object} methods The keys are the names of the methods that can be called by the remote\n\t   * while the values are the method functions.\n\t   * @param {Promise} destructionPromise A promise resolved when destroy() is called on the penpal\n\t   * connection.\n\t   * @returns {Function} A function that may be called to disconnect the receiver.\n\t   */\n\n\n\t  var connectCallReceiver = function connectCallReceiver(info, methods, destructionPromise) {\n\t    var localName = info.localName,\n\t        local = info.local,\n\t        remote = info.remote,\n\t        remoteOrigin = info.remoteOrigin;\n\t    var destroyed = false;\n\t    log(\"\".concat(localName, \": Connecting call receiver\"));\n\n\t    var handleMessageEvent = function handleMessageEvent(event) {\n\t      if (event.source === remote && event.origin === remoteOrigin && event.data.penpal === CALL) {\n\t        var _event$data = event.data,\n\t            methodName = _event$data.methodName,\n\t            args = _event$data.args,\n\t            id = _event$data.id;\n\t        log(\"\".concat(localName, \": Received \").concat(methodName, \"() call\"));\n\n\t        if (methodName in methods) {\n\t          var createPromiseHandler = function createPromiseHandler(resolution) {\n\t            return function (returnValue) {\n\t              log(\"\".concat(localName, \": Sending \").concat(methodName, \"() reply\"));\n\n\t              if (destroyed) {\n\t                // It's possible to throw an error here, but it would need to be thrown asynchronously\n\t                // and would only be catchable using window.onerror. This is because the consumer\n\t                // is merely returning a value from their method and not calling any function\n\t                // that they could wrap in a try-catch. Even if the consumer were to catch the error,\n\t                // the value of doing so is questionable. Instead, we'll just log a message.\n\t                log(\"\".concat(localName, \": Unable to send \").concat(methodName, \"() reply due to destroyed connection\"));\n\t                return;\n\t              }\n\n\t              var message = {\n\t                penpal: REPLY,\n\t                id: id,\n\t                resolution: resolution,\n\t                returnValue: returnValue\n\t              };\n\n\t              if (resolution === REJECTED && returnValue instanceof Error) {\n\t                message.returnValue = serializeError(returnValue);\n\t                message.returnValueIsError = true;\n\t              }\n\n\t              try {\n\t                remote.postMessage(message, remoteOrigin);\n\t              } catch (err) {\n\t                // If a consumer attempts to send an object that's not cloneable (e.g., window),\n\t                // we want to ensure the receiver's promise gets rejected.\n\t                if (err.name === DATA_CLONE_ERROR) {\n\t                  remote.postMessage({\n\t                    penpal: REPLY,\n\t                    id: id,\n\t                    resolution: REJECTED,\n\t                    returnValue: serializeError(err),\n\t                    returnValueIsError: true\n\t                  }, remoteOrigin);\n\t                }\n\n\t                throw err;\n\t              }\n\t            };\n\t          };\n\n\t          new Penpal.Promise(function (resolve) {\n\t            return resolve(methods[methodName].apply(methods, args));\n\t          }).then(createPromiseHandler(FULFILLED), createPromiseHandler(REJECTED));\n\t        }\n\t      }\n\t    };\n\n\t    local.addEventListener(MESSAGE, handleMessageEvent);\n\t    destructionPromise.then(function () {\n\t      destroyed = true;\n\t      local.removeEventListener(MESSAGE, handleMessageEvent);\n\t    });\n\t  };\n\t  /**\n\t   * @typedef {Object} Child\n\t   * @property {Promise} promise A promise which will be resolved once a connection has\n\t   * been established.\n\t   * @property {HTMLIframeElement} iframe The created iframe element.\n\t   * @property {Function} destroy A method that, when called, will remove the iframe element from\n\t   * the DOM and clean up event listeners.\n\t   */\n\n\t  /**\n\t   * Creates an iframe, loads a webpage into the URL, and attempts to establish communication with\n\t   * the iframe.\n\t   * @param {Object} options\n\t   * @param {string} options.url The URL of the webpage that should be loaded into the created iframe.\n\t   * @param {HTMLElement} [options.appendTo] The container to which the iframe should be appended.\n\t   * @param {Object} [options.methods={}] Methods that may be called by the iframe.\n\t   * @param {Number} [options.timeout] The amount of time, in milliseconds, Penpal should wait\n\t   * for the child to respond before rejecting the connection promise.\n\t   * @return {Child}\n\t   */\n\n\n\t  Penpal.connectToChild = function (_ref2) {\n\t    var url = _ref2.url,\n\t        appendTo = _ref2.appendTo,\n\t        iframe = _ref2.iframe,\n\t        _ref2$methods = _ref2.methods,\n\t        methods = _ref2$methods === void 0 ? {} : _ref2$methods,\n\t        timeout = _ref2.timeout;\n\n\t    if (iframe && iframe.parentNode) {\n\t      var error = new Error('connectToChild() must not be called with an iframe already attached to DOM');\n\t      error.code = ERR_IFRAME_ALREADY_ATTACHED_TO_DOM;\n\t      throw error;\n\t    }\n\n\t    var destroy;\n\t    var connectionDestructionPromise = new DestructionPromise(function (resolveConnectionDestructionPromise) {\n\t      destroy = resolveConnectionDestructionPromise;\n\t    });\n\t    var parent = window;\n\t    iframe = iframe || document.createElement('iframe');\n\t    iframe.src = url;\n\t    var childOrigin = getOriginFromUrl(url);\n\t    var promise = new Penpal.Promise(function (resolveConnectionPromise, reject) {\n\t      var connectionTimeoutId;\n\n\t      if (timeout !== undefined) {\n\t        connectionTimeoutId = setTimeout(function () {\n\t          var error = new Error(\"Connection to child timed out after \".concat(timeout, \"ms\"));\n\t          error.code = ERR_CONNECTION_TIMEOUT;\n\t          reject(error);\n\t          destroy();\n\t        }, timeout);\n\t      } // We resolve the promise with the call sender. If the child reconnects (for example, after\n\t      // refreshing or navigating to another page that uses Penpal, we'll update the call sender\n\t      // with methods that match the latest provided by the child.\n\n\n\t      var callSender = {};\n\t      var receiverMethodNames;\n\t      var destroyCallReceiver;\n\n\t      var handleMessage = function handleMessage(event) {\n\t        var child = iframe.contentWindow;\n\n\t        if (event.source === child && event.origin === childOrigin && event.data.penpal === HANDSHAKE) {\n\t          log('Parent: Received handshake, sending reply'); // If event.origin is \"null\", the remote protocol is file:\n\t          // and we must post messages with \"*\" as targetOrigin [1]\n\t          // [1] https://developer.mozilla.org/fr/docs/Web/API/Window/postMessage#Utiliser_window.postMessage_dans_les_extensions\n\n\t          var remoteOrigin = event.origin === \"null\" ? \"*\" : event.origin;\n\t          event.source.postMessage({\n\t            penpal: HANDSHAKE_REPLY,\n\t            methodNames: Object.keys(methods)\n\t          }, remoteOrigin);\n\t          var info = {\n\t            localName: 'Parent',\n\t            local: parent,\n\t            remote: child,\n\t            remoteOrigin: remoteOrigin\n\t          }; // If the child reconnected, we need to destroy the previous call receiver before setting\n\t          // up a new one.\n\n\t          if (destroyCallReceiver) {\n\t            destroyCallReceiver();\n\t          } // When this promise is resolved, it will destroy the call receiver (stop listening to\n\t          // method calls from the child) and delete its methods off the call sender.\n\n\n\t          var callReceiverDestructionPromise = new DestructionPromise(function (resolveCallReceiverDestructionPromise) {\n\t            connectionDestructionPromise.then(resolveCallReceiverDestructionPromise);\n\t            destroyCallReceiver = resolveCallReceiverDestructionPromise;\n\t          });\n\t          connectCallReceiver(info, methods, callReceiverDestructionPromise); // If the child reconnected, we need to remove the methods from the previous call receiver\n\t          // off the sender.\n\n\t          if (receiverMethodNames) {\n\t            receiverMethodNames.forEach(function (receiverMethodName) {\n\t              delete callSender[receiverMethodName];\n\t            });\n\t          }\n\n\t          receiverMethodNames = event.data.methodNames;\n\t          connectCallSender(callSender, info, receiverMethodNames, destroy, connectionDestructionPromise);\n\t          clearTimeout(connectionTimeoutId);\n\t          resolveConnectionPromise(callSender);\n\t        }\n\t      };\n\n\t      parent.addEventListener(MESSAGE, handleMessage);\n\t      log('Parent: Loading iframe');\n\t      (appendTo || document.body).appendChild(iframe); // This is to prevent memory leaks when the iframe is removed\n\t      // from the document and the consumer hasn't called destroy().\n\t      // Without this, event listeners attached to the window would\n\t      // stick around and since the event handlers have a reference\n\t      // to the iframe in their closures, the iframe would stick around\n\t      // too.\n\n\t      var checkIframeInDocIntervalId = setInterval(function () {\n\t        if (!document.contains(iframe)) {\n\t          clearInterval(checkIframeInDocIntervalId);\n\t          destroy();\n\t        }\n\t      }, CHECK_IFRAME_IN_DOC_INTERVAL);\n\t      connectionDestructionPromise.then(function () {\n\t        if (iframe.parentNode) {\n\t          iframe.parentNode.removeChild(iframe);\n\t        }\n\n\t        parent.removeEventListener(MESSAGE, handleMessage);\n\t        clearInterval(checkIframeInDocIntervalId);\n\t        var error = new Error('Connection destroyed');\n\t        error.code = ERR_CONNECTION_DESTROYED;\n\t        reject(error);\n\t      });\n\t    });\n\t    return {\n\t      promise: promise,\n\t      iframe: iframe,\n\t      destroy: destroy\n\t    };\n\t  };\n\t  /**\n\t   * @typedef {Object} Parent\n\t   * @property {Promise} promise A promise which will be resolved once a connection has\n\t   * been established.\n\t   */\n\n\t  /**\n\t   * Attempts to establish communication with the parent window.\n\t   * @param {Object} options\n\t   * @param {string} [options.parentOrigin=*] Valid parent origin used to restrict communication.\n\t   * @param {Object} [options.methods={}] Methods that may be called by the parent window.\n\t   * @param {Number} [options.timeout] The amount of time, in milliseconds, Penpal should wait\n\t   * for the parent to respond before rejecting the connection promise.\n\t   * @return {Parent}\n\t   */\n\n\n\t  Penpal.connectToParent = function () {\n\t    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t        _ref3$parentOrigin = _ref3.parentOrigin,\n\t        parentOrigin = _ref3$parentOrigin === void 0 ? '*' : _ref3$parentOrigin,\n\t        _ref3$methods = _ref3.methods,\n\t        methods = _ref3$methods === void 0 ? {} : _ref3$methods,\n\t        timeout = _ref3.timeout;\n\n\t    if (window === window.top) {\n\t      var error = new Error('connectToParent() must be called within an iframe');\n\t      error.code = ERR_NOT_IN_IFRAME;\n\t      throw error;\n\t    }\n\n\t    var destroy;\n\t    var connectionDestructionPromise = new DestructionPromise(function (resolveConnectionDestructionPromise) {\n\t      destroy = resolveConnectionDestructionPromise;\n\t    });\n\t    var child = window;\n\t    var parent = child.parent;\n\t    var promise = new Penpal.Promise(function (resolveConnectionPromise, reject) {\n\t      var connectionTimeoutId;\n\n\t      if (timeout !== undefined) {\n\t        connectionTimeoutId = setTimeout(function () {\n\t          var error = new Error(\"Connection to parent timed out after \".concat(timeout, \"ms\"));\n\t          error.code = ERR_CONNECTION_TIMEOUT;\n\t          reject(error);\n\t          destroy();\n\t        }, timeout);\n\t      }\n\n\t      var handleMessageEvent = function handleMessageEvent(event) {\n\t        if ((parentOrigin === '*' || parentOrigin === event.origin) && event.source === parent && event.data.penpal === HANDSHAKE_REPLY) {\n\t          log('Child: Received handshake reply');\n\t          child.removeEventListener(MESSAGE, handleMessageEvent);\n\t          var info = {\n\t            localName: 'Child',\n\t            local: child,\n\t            remote: parent,\n\t            remoteOrigin: event.origin\n\t          };\n\t          var callSender = {};\n\t          connectCallReceiver(info, methods, connectionDestructionPromise);\n\t          connectCallSender(callSender, info, event.data.methodNames, destroy, connectionDestructionPromise);\n\t          clearTimeout(connectionTimeoutId);\n\t          resolveConnectionPromise(callSender);\n\t        }\n\t      };\n\n\t      child.addEventListener(MESSAGE, handleMessageEvent);\n\t      connectionDestructionPromise.then(function () {\n\t        child.removeEventListener(MESSAGE, handleMessageEvent);\n\t        var error = new Error('Connection destroyed');\n\t        error.code = ERR_CONNECTION_DESTROYED;\n\t        reject(error);\n\t      });\n\t      log('Child: Sending handshake');\n\t      parent.postMessage({\n\t        penpal: HANDSHAKE,\n\t        methodNames: Object.keys(methods)\n\t      }, parentOrigin);\n\t    });\n\t    return {\n\t      promise: promise,\n\t      destroy: destroy\n\t    };\n\t  };\n\n\t  var _default = Penpal;\n\t  exports.default = _default;\n\t});\n\tvar Penpal = unwrapExports(lib);\n\tvar lib_1 = lib.ERR_IFRAME_ALREADY_ATTACHED_TO_DOM;\n\tvar lib_2 = lib.ERR_NOT_IN_IFRAME;\n\tvar lib_3 = lib.ERR_CONNECTION_TIMEOUT;\n\tvar lib_4 = lib.ERR_CONNECTION_DESTROYED;\n\n\tfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n\t  try {\n\t    var info = gen[key](arg);\n\t    var value = info.value;\n\t  } catch (error) {\n\t    reject(error);\n\t    return;\n\t  }\n\n\t  if (info.done) {\n\t    resolve(value);\n\t  } else {\n\t    Promise.resolve(value).then(_next, _throw);\n\t  }\n\t}\n\n\tfunction _asyncToGenerator(fn) {\n\t  return function () {\n\t    var self = this,\n\t        args = arguments;\n\t    return new Promise(function (resolve, reject) {\n\t      var gen = fn.apply(self, args);\n\n\t      function _next(value) {\n\t        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n\t      }\n\n\t      function _throw(err) {\n\t        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n\t      }\n\n\t      _next(undefined);\n\t    });\n\t  };\n\t}\n\n\tvar editor;\n\tfunction updateEditor(_ref) {\n\t  var value = _ref.value,\n\t      language = _ref.language;\n\n\t  require(['vs/editor/editor.main'], function () {\n\t    if (typeof monaco !== 'undefined' && typeof editor !== 'undefined') {\n\t      editor.setValue(value);\n\t      var lang = editor.getModel();\n\t      if (!lang) throw new Error('Editor has no model');\n\t      monaco.editor.setModelLanguage(lang, language);\n\t    }\n\t  });\n\t}\n\n\tfunction setupKeyBindings(editor, client) {\n\t  // save\n\t  editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S, function () {\n\t    client.keyCommand({\n\t      cmd: true,\n\t      keys: ['s']\n\t    });\n\t  }, ''); // save all\n\n\t  editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyMod.Shift | monaco.KeyCode.KEY_S, function () {\n\t    client.keyCommand({\n\t      cmd: true,\n\t      shift: true,\n\t      keys: ['s']\n\t    });\n\t  }, '');\n\t}\n\n\tfunction installResizeWatcher(el, fn, interval) {\n\t  var offset = {\n\t    width: el.offsetWidth,\n\t    height: el.offsetHeight\n\t  };\n\t  setInterval(function () {\n\t    var newOffset = {\n\t      width: el.offsetWidth,\n\t      height: el.offsetHeight\n\t    };\n\n\t    if (offset.height !== newOffset.height || offset.width !== newOffset.width) {\n\t      offset = newOffset;\n\t      fn();\n\t    }\n\t  }, interval);\n\t}\n\n\tfunction setupEditor(cfg) {\n\t  require(['vs/editor/editor.main'],\n\t  /*#__PURE__*/\n\t  _asyncToGenerator(\n\t  /*#__PURE__*/\n\t  regeneratorRuntime.mark(function _callee() {\n\t    var wrapper, language, theme, value, ed, client;\n\t    return regeneratorRuntime.wrap(function _callee$(_context) {\n\t      while (1) {\n\t        switch (_context.prev = _context.next) {\n\t          case 0:\n\t            if (!(typeof monaco !== 'undefined')) {\n\t              _context.next = 13;\n\t              break;\n\t            }\n\n\t            wrapper = window.document.getElementById('monaco-editor-wrapper');\n\n\t            if (wrapper) {\n\t              _context.next = 4;\n\t              break;\n\t            }\n\n\t            throw new Error('No wrapper found');\n\n\t          case 4:\n\t            language = cfg.language, theme = cfg.theme, value = cfg.value;\n\t            ed = editor = window.editor = monaco.editor.create(wrapper, {\n\t              language: language,\n\t              theme: theme,\n\t              value: value\n\t            });\n\t            _context.next = 8;\n\t            return conn.promise;\n\n\t          case 8:\n\t            client = _context.sent;\n\t            ed.onDidChangeModelContent(function (event) {\n\t              if (!event) {\n\t                return;\n\t              }\n\n\t              client.onValueChanged({\n\t                event: event,\n\t                value: ed.getValue()\n\t              });\n\t            });\n\t            client.onReady();\n\t            setupKeyBindings(ed, client);\n\t            installResizeWatcher(wrapper, editor.layout.bind(editor), 2000);\n\n\t          case 13:\n\t          case \"end\":\n\t            return _context.stop();\n\t        }\n\t      }\n\t    }, _callee);\n\t  })));\n\t}\n\n\tvar conn = Penpal.connectToParent({\n\t  methods: {\n\t    setupEditor: setupEditor,\n\t    updateEditor: updateEditor\n\t  }\n\t});\n\n}());\n"],"names":[],"mappingsrtfile":"frame.js"}